options {
  DEBUG_PARSER=false;
}

PARSER_BEGIN(DataToProgram)

package src.datatoprogram;

import java.util.ArrayList;

public class DataToProgram {
  
  private static DataToProgram DTPparser = null;
  private static long startTime = System.currentTimeMillis();
  
  public static void main(String[] args) {
    try {
      java.util.Scanner scanner = new java.util.Scanner(new java.io.File(args[0]));
      String text = scanner.useDelimiter("\u005c\u005cA").next();
      scanner.close();
      run(text);
      
    } catch (Throwable e) {
    }
  }
  
  public static String run(String input) throws ParseException {
    String dataAsProgram = "";
     //args[0]
      if (DTPparser == null) {
        DTPparser = new DataToProgram(new java.io.StringReader(input));
      } else {
        ReInit(new java.io.StringReader(input));
      }
      dataAsProgram = start();
      String indented = "";
      int indent = 0;
      String[] lines;
      try{
        lines = dataAsProgram.split(System.getProperty("line.separator"));
      } catch (Throwable e) {
        lines = dataAsProgram.split("\n");
      }

      for(String s : lines) { //for every line
        if(s.contains(">")){ indent += 2; } //if > then +2
        if(s.contains("<")){ indent -= 2; } //if < then -2
        s = s.replaceAll(">", ""); //remove all > < signs
        s = s.replaceAll("<", "");
        indented += new String(new char[indent]).replace("\0", " ") + s + "\n";
      }
    
    return indented;
  }
}
  
class Program { //[progname, varnum1, "S", varnum2]
  String print;

  public Program(int inputvarnum, Block block, int outputvarnum) {
    //String indentation = new String(new char[indent]).replace("\0", " ");
    this.print = "progname read " + new Var(inputvarnum).print + block.print + "\nwrite " + new Var(outputvarnum).print;
  }
}

class Block {
  String print;
  public Block(Statements statements) {
    this.print = " {\n>" + statements.print + "\n<}";
  }
}

class Statements {
  ArrayList<Cmd> cmds;
  String print;
  public Statements(ArrayList<Cmd> cmds) {
    this.cmds = cmds;
    String getAllCmds = ""; //cumulative string for commands
    if(cmds.isEmpty()) { //if empty statements
      this.print = "";
    } else { //if not empty statements
      for(int i = 0; i < cmds.size(); i++) { //for each cmd
        getAllCmds += cmds.get(i).print; //add cmd to string
        if(i != cmds.size()-1) { //if not last object
          getAllCmds += ";\n"; //include comma
        }
      }
      this.print = getAllCmds; //add square brackets around
    }
  }
}

abstract class Cmd { String print; }
class Assign extends Cmd { //[:=, varnum, "E"]
  public Assign(int V, Expr E) {
    super.print = new Var(V).print + " := " + E.print;
  }
}
class While extends Cmd { //[while, "E", "B"]
  public While(Expr E, Block B) {
    super.print = "while " + E.print + B.print;
  }
}
class If extends Cmd { //[if, "E", "BT", "BE"]
  public If(Expr E, Block Bt, Block Be) {
    if(Be.print.equals(" {\n>\n<}")) {
      super.print = "if " + E.print + Bt.print;
    } else {
      super.print = "if " + E.print + Bt.print + " else" + Be.print;
    }
  }
}

abstract class Expr { String print; }
class Nil extends Expr { //[quote, nil]
  public Nil() { super.print = "nil"; }
}
class Var extends Expr { //[var, varnum]
  public Var(int num) { super.print = "var" + num; }
}
class Cons extends Expr { //[cons, "E", "F"]
  public Cons(Expr E, Expr F) { super.print = "cons " + E.print + " " + F.print; }
}
class Hd extends Expr { //[hd, "E"]
  public Hd(Expr E) { super.print = "hd " + E.print; }
}
class Tl extends Expr { //[tl, "E"]
  public Tl(Expr E) {super.print = "tl " + E.print; }
}

PARSER_END(DataToProgram)

// SKIP characters: spaces, tabs, carriage returns, new lines
SKIP: { " " | "\t" | "\r" | "\n" }

// TOKEN KEYWORDS
TOKEN: {
    <READ: "read"      >
  | <WRITE: "write"    >
  | <ASSIGN: ":="      >
  | <WHILE: "while"    >
  | <IF: "if"          >
  | <QUOTE: "quote"    >
  | <NIL: "nil"        >
  | <CONS: "cons"      >
  | <HD: "hd"          >
  | <TL: "tl"          >
  | <VAR: "var"        >
  | <NUM: (["0"-"9"])+ >
}

String start():{ Program p; } {
  p=program() { return p.print; }
}

Program program(): {String in, out; int inputVar, outputVar; Block S;} { //[int, block, int]
  "["
  in=<NUM>.image { inputVar = Integer.parseInt(in); }
  ","
  S=block()
  ","
  out=<NUM>.image { outputVar = Integer.parseInt(out); }
  "]"
  { return new Program(inputVar, S, outputVar); }
}
  
Block block():{
  Statements s = new Statements(new ArrayList<Cmd>());
} {
  "[" (s=statements())? "]" {
    return new Block(s);
  }
}
  
Statements statements():{
  Cmd c;
  Statements s2 = new Statements(new ArrayList<Cmd>());
}
{
  c=command()("," s2=statements())? {
    ArrayList<Cmd> cmds = new ArrayList<Cmd>(); //List of commands
    cmds.add(c);
    for(Cmd cmd : s2.cmds) {
      cmds.add(cmd);
    }
    return new Statements(cmds);
  }
}

Cmd command():{ String s; 
                int v;
                Expr e;
                Block b;
                Block b2 = null;
              }
{
  "["
  (
  //ASSIGN [:=, varnum, Expr]
  <ASSIGN> "," s=<NUM>.image { v = Integer.parseInt(s); } "," e=expr() "]"
  { return new Assign(v, e); }
  
  //WHILE [while, Expr, Block]
  | <WHILE> "," e=expr() "," b=block() "]"
  { return new While(e, b); }

  //IF [if, Expr, Block, Block]
  | <IF> "," e=expr() "," b=block() "," b2=block() "]"
    { return new If(e, b, b2); }
  )
}

Expr expr():{Expr e; String s;} {
  "["
  (   <QUOTE> "," <NIL> "]" { return new Nil(); }
  
    | <CONS> "," e=expr() "," {Expr e2;} e2=expr() "]" { return new Cons(e, e2); }
  
    | <HD> "," e=expr() "]" { return new Hd(e); }
  
    | <TL> "," e=expr() "]" { return new Tl(e); }
  
    | <VAR> "," s=<NUM>.image "]" { return new Var(Integer.parseInt(s)); }
  )
}