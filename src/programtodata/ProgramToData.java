package programtodata;/* ProgramToData.java */
/* Generated By:JavaCC: Do not edit this line. ProgramToData.java */
import java.util.ArrayList;
import java.util.LinkedList;


public class ProgramToData implements ProgramToDataConstants {

  //global variables
  public static ArrayList<Var> varList;
  public static int varnum;
  public static LinkedList<Cmd> equalityStack = new LinkedList<Cmd>();
  public static ProgramToData parser = null;

  public static void main(String[] args) {
    try {
      java.util.Scanner scanner = new java.util.Scanner(new java.io.File(args[0]));
      String text = scanner.useDelimiter("\u005c\u005cA").next();
      scanner.close();
      System.out.println(run(text));
    } catch (Throwable e) {
    }
  }

  public static String run(String input) throws ParseException {
    String programAsData;
      varnum = 0;
    try { //args[0]
      programAsData = new ProgramToData(new java.io.StringReader(input)).start();
      String indented = "";
      int indent = 0;
      String[] lines;

      lines = programAsData.split(System.getProperty("line.separator"));

      //System.out.println("PROGRAM AS DATA:\n" + programAsData);

      for(String s : lines) { //for every line
        if(s.contains(">")){ indent += 2; } //if > then +2
        if(s.contains("<")){ indent -= 2; } //if < then -2
        s = s.replaceAll(">", "");
        s = s.replaceAll("<", "");
        indented += new String(new char[indent]).replace("\0", " ") + s + "\n";
          System.out.println(s);
      }
      return indented;

    } catch (Throwable e) {
      System.out.println("Syntax check failed: " + e.getMessage());
      throw e;
    }
  }

  final public String start() throws ParseException {varList = new ArrayList<Var>();
  Program p;
    p = program();
    jj_consume_token(0);
{if ("" != null) return p.print;}
    throw new Error("Missing return statement in function");
  }

  final public Program program() throws ParseException {Var input; Block S; Var output;
    jj_consume_token(VAR);
    jj_consume_token(READ);
    input = variable();
    S = block();
    jj_consume_token(WRITE);
    output = variable();
for (Var v : varList) {
      System.out.println(v.name);
    }
    {if ("" != null) return new Program(input, S, output);}
    throw new Error("Missing return statement in function");
  }

  final public Block block() throws ParseException {Block b;
  Statements s = new Statements(new ArrayList<Cmd>());
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHILE:
    case IF:
    case SWITCH:
    case VAR:{
      s = statements();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(26);
b = new Block(s);
    {if ("" != null) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Statements statements() throws ParseException {Statements s;
  Statements s2 = new Statements(new ArrayList<Cmd>());
  ArrayList<Cmd> cmds = new ArrayList<Cmd>(); //List of commands
  LinkedList<Cmd> currentCmd = new LinkedList<Cmd>();
    currentCmd = command(currentCmd);
for(Cmd cmd : currentCmd) {
        cmds.add(cmd);
      }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 27:{
      jj_consume_token(27);
      s2 = statements();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
for(Cmd cmd : s2.cmds) {
      cmds.add(cmd);
    }
    s = new Statements(cmds);
    {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<Cmd> command(LinkedList<Cmd> currentCmd) throws ParseException {Var v;
                            Expr e;
                            Block b;
                            Block b2 = null;
                              Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      //ASSIGN (VAR <ASSIGN> <EXPR>)
        v = variable();
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 28:{
        jj_consume_token(28);
        t = jj_consume_token(NAME);
        jj_consume_token(29);
        e = expr();
while (!equalityStack.isEmpty()) {
        currentCmd.addLast(equalityStack.pop());
      }
      currentCmd.addLast(new Macro(v, t.image, e));
      {if ("" != null) return currentCmd;}
        break;
        }
      case ASSIGN:
      case WHILE:
      case IF:
      case CONS:
      case HD:
      case TL:
      case BOOL:
      case ATOM:
      case NIL:
      case VAR:
      case NUM:
      case 32:
      case 34:{
        e = expr();
while (!equalityStack.isEmpty()) {
        currentCmd.addLast(equalityStack.pop());
      }
      currentCmd.addLast(new Assign(v.varnum, e));
      {if ("" != null) return currentCmd;}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      e = expr();
LinkedList<Cmd> whileEqStack = new LinkedList<Cmd>();
      for (Cmd c : equalityStack) {
        currentCmd.addLast(c);
        whileEqStack.addLast(c);
      }
      equalityStack.clear();
      b = block();
ArrayList<Cmd> whileListCmds = new ArrayList<Cmd>();
      //add cmds from block to new block
      for (Cmd c : b.statements.cmds) {
        whileListCmds.add(c);
      }
      //add equality check from expr to new block
      for (Cmd c : whileEqStack) {
        whileListCmds.add(c);
      }
      //create new statements

      b = new Block(new Statements(whileListCmds));
      currentCmd.addLast(new While(e, b));
      {if ("" != null) return currentCmd;}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      e = expr();
while (!equalityStack.isEmpty()) {
        currentCmd.add(equalityStack.pop());
      }
      b = block();
      if (jj_2_1(2147483647)) {
        jj_consume_token(ELSE);
        b2 = block();
      } else {
        ;
      }
if(b2 == null) { //no else
        currentCmd.addLast(new If(e, b));
        {if ("" != null) return equalityStack;}
      } else { //else
        currentCmd.addLast(new If(e, b, b2));
        {if ("" != null) return currentCmd;}
      }
      break;
      }
    case SWITCH:{
      jj_consume_token(SWITCH);
      e = expr();
while (!equalityStack.isEmpty()) {
        currentCmd.addLast(equalityStack.pop());
      }
      jj_consume_token(25);
ArrayList<Rule> rulelist = new ArrayList<Rule>();
    Statements def = null;
      rulelist = ruleList(rulelist);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEFAULTCASE:{
        jj_consume_token(DEFAULTCASE);
        jj_consume_token(30);
        def = statements();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(26);
currentCmd.addLast(new Switch(e, rulelist, def));
      {if ("" != null) return currentCmd;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Rule> ruleList(ArrayList<Rule> rulelist) throws ParseException {Rule r;
  ArrayList<Expr> exprList = new ArrayList<Expr>();
  Statements s;
    jj_consume_token(CASE);
    exprList = exprList(exprList);
    jj_consume_token(30);
    s = statements();
for (Expr e : exprList) {
      rulelist.add(new Rule(e, s));
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE:{
      rulelist = ruleList(rulelist);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return rulelist;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expr expr() throws ParseException {Expr e,e2;
    if (jj_2_2(2147483647)) {
      e = expr2();
      jj_consume_token(31);
      e2 = expr();
Equality eq = new Equality(e, e2);
    ProgramToData.equalityStack.add(eq);
    {if ("" != null) return eq.getOutput();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case WHILE:
      case IF:
      case CONS:
      case HD:
      case TL:
      case BOOL:
      case ATOM:
      case NIL:
      case VAR:
      case NUM:
      case 32:
      case 34:{
        e = expr2();
{if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expr expr2() throws ParseException {Expr e; Var v; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NIL:{
      jj_consume_token(NIL);
{if ("" != null) return new Nil();}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_3(2147483647)) {
        jj_consume_token(CONS);
Expr e2;
        e = expr();
        e2 = expr();
{if ("" != null) return new Cons(e, e2);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONS:{
          t = jj_consume_token(CONS);
{if ("" != null) return new Atom(t.image);}
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          if (jj_2_4(2147483647)) {
            jj_consume_token(HD);
            e = expr();
{if ("" != null) return new Hd(e);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case HD:{
              t = jj_consume_token(HD);
{if ("" != null) return new Atom(t.image);}
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              if (jj_2_5(2147483647)) {
                jj_consume_token(TL);
                e = expr();
{if ("" != null) return new Tl(e);}
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case TL:{
                  t = jj_consume_token(TL);
{if ("" != null) return new Atom(t.image);}
                  break;
                  }
                case VAR:{
                  v = variable();
{if ("" != null) return v;}
                  break;
                  }
                case NUM:{
                  t = jj_consume_token(NUM);
{if ("" != null) return new Num(t.image);}
                  break;
                  }
                case BOOL:{
                  t = jj_consume_token(BOOL);
{if ("" != null) return new Bool(t.image);}
                  break;
                  }
                case 32:{
                  jj_consume_token(32);
ArrayList<Expr> exprlist = new ArrayList<Expr>();
        ArrayList<Expr> el = new ArrayList<Expr>();
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case ASSIGN:
                  case WHILE:
                  case IF:
                  case CONS:
                  case HD:
                  case TL:
                  case BOOL:
                  case ATOM:
                  case NIL:
                  case VAR:
                  case NUM:
                  case 32:
                  case 34:{
                    el = exprList(exprlist);
                    break;
                    }
                  default:
                    jj_la1[7] = jj_gen;
                    ;
                  }
                  jj_consume_token(33);
System.out.println(el);
      {if ("" != null) return new List(el);}
                  break;
                  }
                case ASSIGN:
                case WHILE:
                case IF:
                case ATOM:{
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case ATOM:{
                    t = jj_consume_token(ATOM);
                    break;
                    }
                  case ASSIGN:{
                    t = jj_consume_token(ASSIGN);
                    break;
                    }
                  case WHILE:{
                    t = jj_consume_token(WHILE);
                    break;
                    }
                  case IF:{
                    t = jj_consume_token(IF);
                    break;
                    }
                  default:
                    jj_la1[8] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
{if ("" != null) return new Atom(t.image);}
                  break;
                  }
                case 34:{
                  jj_consume_token(34);
                  e = expr();
                  jj_consume_token(35);
{if ("" != null) return e;}
                  break;
                  }
                default:
                  jj_la1[12] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Expr> exprList(ArrayList<Expr> list) throws ParseException {Expr e;
    if (jj_2_6(2147483647)) {
      e = expr();
list.add(e);
      jj_consume_token(36);
{if ("" != null) return exprList(list);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case WHILE:
      case IF:
      case CONS:
      case HD:
      case TL:
      case BOOL:
      case ATOM:
      case NIL:
      case VAR:
      case NUM:
      case 32:
      case 34:{
        e = expr();
list.add(e);
    {if ("" != null) return list;}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Var variable() throws ParseException {Token t; Var v;
    t = jj_consume_token(VAR);
//get token
    //check if var already exists
    int pointer = 0; //points through varList
    //System.out.println("varList:" + varList);
    while (pointer < varList.size()) {
      v = varList.get(pointer); //get var in list
      //System.out.print(t.toString() + "=" + v.name.toString() + "? ");
      //System.out.println(t.toString().equals(v.name));
      if (t.toString().equals(v.name)) {
        //System.out.println(" Found:" + v.name);
        {if ("" != null) return v;} //found var and return it
      }
      pointer += 1;
    }
    //variable does not exist
    v = new Var(t.toString(), varnum); //create new var
    varnum += 1; //increment var counter
    varList.add(v); //add var to varlist
    //System.out.println("New Var: " + v.name + v.print);
    {if ("" != null) return v;} //return new Var object with value

    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(HD)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(TL)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(TL)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(HD)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_scan_token(HD)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_scan_token(CONS)) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_4()
 {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_1()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_2()) return true;
    if (jj_scan_token(36)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_2()) return true;
    if (jj_scan_token(36)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_1()) return true;
    if (jj_scan_token(31)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(34)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(32)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(TL)) return true;
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ProgramToDataTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x420c00,0x8000000,0x10f1ee00,0x80000,0x420c00,0x40000,0xf1ee00,0xf1ee00,0x100e00,0x200000,0x2000,0x4000,0xd18e00,0xf1ee00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x5,0x0,0x0,0x0,0x5,0x5,0x0,0x0,0x0,0x0,0x5,0x5,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ProgramToData(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProgramToData(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProgramToDataTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ProgramToData(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProgramToDataTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ProgramToData(ProgramToDataTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ProgramToDataTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class Program { //[progname, varnum1, "S", varnum2]
  String print;

  public Program(Var varnum1,
          Block block,
          Var varnum2) {
    this.print = "[\u005cn>" + varnum1.varnum + ",\u005cn" + block.print + ",\u005cn" + varnum2.varnum + "\u005cn<]";
  }
}

class Block {
  String print;
  Statements statements;
  public Block(Statements statements) {
    this.statements = statements;
    this.print = "[\u005cn>" + statements.print + "\u005cn<]";
  }
}

class Statements {
  ArrayList<Cmd> cmds;
  String print;
  public Statements(ArrayList<Cmd> cmds) {
    this.cmds = cmds;
    String getAllCmds = ""; //cumulative string for commands
    if(cmds.isEmpty()) { //if empty statements
      this.print = "";
    } else { //if not empty statements
      //System.out.println("Size:"+cmds.size() + " |" + cmds);
      for(int i = 0; i < cmds.size(); i++) { //for each cmd
        getAllCmds += cmds.get(i).print; //add cmd to string
        if(i != cmds.size()-1) { //if not last object
          getAllCmds += ",\u005cn"; //include comma
        }
      }
      this.print = getAllCmds; //add square brackets around
    }
  }
}

abstract class Cmd { String print; }
class Assign extends Cmd { //[:=, varnum, "E"]
  public Assign(int V, Expr E) {
    super.print = "[:=, " + V + ", " + E.print + "]";
  }
}
class While extends Cmd { //[while, "E", "B"]
  public While(Expr E, Block B) {
    super.print = "[while, " + E.print + ",\u005cn>" + B.print + "\u005cn<]";
  }
}
class If extends Cmd { //[if, "E", "Bt", "Be"]
  public If(Expr E, Block Bt, Block Be) {
    super.print = "[if, " + E.print + ",\u005cn>" + Bt.print + ",\u005cn " + Be.print + "\u005cn<]";
  }
  public If(Expr E, Block B) {
    super.print = "[if, " + E.print + ",\u005cn>" + B.print + ",\u005cn< []\u005cn]";
  }

}

abstract class Expr { String print; }

class Nil extends Expr { //[nil]
  public Nil() { super.print = "[quote, nil]"; }
}
class Var extends Expr { //[var, varnum]
  String name;
  int varnum;
  public Var(String name, int varnum) {
    this.name = name;
    this.varnum = varnum;
    super.print = "[var, " + varnum + "]";
  }
}
class Cons extends Expr { //[cons, "E", "F"]
  public Cons(Expr E, Expr F) {
    super.print = "[cons, " + E.print + ", " + F.print + "]";
  }
}
class Hd extends Expr { //[hd, "E"]
  public Hd(Expr E) {
    super.print = "[hd, " + E.print + "]";
  }
}
class Tl extends Expr { //[tl, "E"]
  public Tl(Expr E) {
    super.print = "[tl, " + E.print + "]";
  }
}
class Num extends Expr { //[cons, nil, nil]
  public Num(String s) {
    Expr num;
    if (s.equals("0")) { //if num < 1
      num = new Nil();
    } else { //if num > 0
      num = new Cons(new Nil(), new Nil());
      for (int i = 1; i < Integer.parseInt(s); i++) {
        num = new Cons(new Nil(), num);
      }
    }
    super.print = num.print;
  }
}

class Bool extends Expr { //nil or [cons, nil,nil]
  public Bool(String s) {
    Expr bool;
    if (s.equals("true")) { //if bool is true
      bool = new Cons(new Nil(), new Nil());
    } else { //if bool is false
      bool = new Nil();
    }
    super.print = bool.print;
  }
}

class Atom extends Expr {
  public Atom(String s) {
    Expr atom = new Nil();
    switch (s) {
      case "quote":
        atom = makeTree(1);
        break;
      case "var":
        atom = makeTree(2);
        break;
      case "cons":
        atom = makeTree(3);
        break;
      case "hd":
        atom = makeTree(4);
        break;
      case "tl":
        atom = makeTree(5);
        break;
      case ":=":
        atom = makeTree(6);
        break;
      case "while":
        atom = makeTree(7);
        break;
      case "if":
        atom = makeTree(8);
        break;
    }
    super.print = atom.print;
  }

  private Expr makeTree(int generations) {
    Expr returnTree = new Nil();
    for (int i = 0; i < generations; i++) {
      returnTree = new Cons(returnTree, new Nil());
    }
    return returnTree;
  }
}

class List extends Expr { //cons all elements to nil to construct list
  public List(ArrayList<Expr> el) {
    Expr list = el.remove(el.size()-1);
    for (int i=el.size()-1; i >= 0; i--) { //go through list reverse
      list = new Cons(el.get(i), list);
    }
    list = new Cons(list, new Nil());
    super.print = list.print;
  }
}

class Equality extends Cmd {
  Expr output;
  public Equality(Expr e1, Expr e2) {
    this.output = new Var("", ProgramToData.varnum+1); //output variable

    //Command array list for every command of equals.while
    ArrayList<Cmd> cmds = new ArrayList<Cmd>();

    //Assign e1 to input
    cmds.add(new Assign(ProgramToData.varnum+0, new Cons(e1, new Cons(e2, new Nil()))));

    //Assigns before while
    cmds.add(new Assign(ProgramToData.varnum+1, new Cons(new Nil(), new Nil())));
    cmds.add(new Assign(ProgramToData.varnum+2, new Hd(new Var("", ProgramToData.varnum+0))));
    cmds.add(new Assign(ProgramToData.varnum+3, new Hd(new Tl(new Var("", ProgramToData.varnum+0)))));
    cmds.add(new Assign(ProgramToData.varnum+4, new Cons(new Var("", ProgramToData.varnum+3),
                                                         new Cons(new Var("", ProgramToData.varnum+2), new Nil())
                                                        )));

    //Make while command
    ArrayList<Cmd> whileCmd = new ArrayList<Cmd>();
    //assigns
    whileCmd.add(new Assign(ProgramToData.varnum+5, new Hd(new Var("", ProgramToData.varnum+4))));
    whileCmd.add(new Assign(ProgramToData.varnum+4, new Tl(new Var("", ProgramToData.varnum+4))));
    whileCmd.add(new Assign(ProgramToData.varnum+6, new Hd(new Var("", ProgramToData.varnum+4))));
    whileCmd.add(new Assign(ProgramToData.varnum+4, new Tl(new Var("", ProgramToData.varnum+4))));

    //first nested if, then block
    ArrayList<Cmd> firstNestedIfThen = new ArrayList<Cmd>();
    firstNestedIfThen.add(new Assign(ProgramToData.varnum+4,
                               new Cons(new Tl(new Var("", ProgramToData.varnum+5)),
                                        new Cons(new Tl(new Var("", ProgramToData.varnum+6)), new Var("", ProgramToData.varnum+4))
                                       )
                              )
                   );
    firstNestedIfThen.add(new Assign(ProgramToData.varnum+4,
                               new Cons(new Hd(new Var("", ProgramToData.varnum+5)),
                                        new Cons(new Hd(new Var("", ProgramToData.varnum+6)), new Var("", ProgramToData.varnum+4))
                                       )
                              )
                   );
    //first nested if, else block
    ArrayList<Cmd> firstNestedIfElse = new ArrayList<Cmd>();
    firstNestedIfElse.add(new Assign(ProgramToData.varnum+1,new Nil()));
    firstNestedIfElse.add(new Assign(ProgramToData.varnum+4, new Nil()));

    //create first nested if and add to first if then
    ArrayList<Cmd> firstIfThen = new ArrayList<Cmd>();
    firstIfThen.add(new If(new Var("", ProgramToData.varnum+5),
                           new Block(new Statements(firstNestedIfThen)),
                           new Block(new Statements(firstNestedIfElse))
                          )
                );

    //second nested if, then block
    ArrayList<Cmd> secondNestedIfThen = new ArrayList<Cmd>();
    secondNestedIfThen.add(new Assign(ProgramToData.varnum+1, new Nil()));
    secondNestedIfThen.add(new Assign(ProgramToData.varnum+4, new Nil()));
    //create second nested if and add to first if else
    ArrayList<Cmd> firstIfElse = new ArrayList<Cmd>();
    firstIfElse.add(new If(new Var("", ProgramToData.varnum+5),
                       new Block(new Statements(secondNestedIfThen))
                      )
               );

    whileCmd.add(new If(new Var("", ProgramToData.varnum+6),
                            new Block(new Statements(firstIfThen)),
                            new Block(new Statements(firstIfElse))
                          )
                );
    //add while
    cmds.add(new While(new Var("", ProgramToData.varnum+4), new Block(new Statements(whileCmd))));


    if (true) {
      super.print = new Statements(cmds).print;
      ProgramToData.varnum += 7;
    } else {
      ArrayList<Cmd> list = new ArrayList<Cmd>();
      list.add(new Assign(ProgramToData.varnum, new Num("2")));
      super.print = new Statements(list).print;
    }
  }
  public Expr getOutput() { return output; }
}

class Switch extends Cmd {
  public Switch(Expr switcher, ArrayList<Rule> rulelist, Statements def) {
    //do last case first, as it isn't an IF-ELSE, just IF
    //get last rule
    Rule r = rulelist.remove(rulelist.size()-1);
    System.out.println("Got last rule");
    //make new ArrayList<Cmd> to make a block
    ArrayList<Cmd> cmds = new ArrayList<Cmd>();
    System.out.println("Created cmds");
    //get expressions from case
    Expr expr = r.getExpr();
    System.out.println("Got expression:" + expr);
    //create equality and add to cmds
    Equality eq = new Equality(switcher, expr);
    cmds.add(eq);
    //get statements from case
    Statements s = r.getStatements();
    System.out.println("Added equality for every expr of case");
    //get statements from case
    System.out.println("Got statements from case");

    //add if statement after equality depending on default
    if (def == null) {
      cmds.add(new If(new Var("", ((Var)eq.getOutput()).varnum), new Block(s)));
    } else {
      cmds.add(new If(new Var("", ((Var)eq.getOutput()).varnum), new Block(s), new Block(def)));
    }
    System.out.println("Added if statement after equality");

    //for each case
    while (!rulelist.isEmpty()) {
      //make previous case a block to put in this if's else
      Block b = new Block(new Statements(cmds));
      System.out.println("Made block out of previous cmds");
      //clear cmds
      cmds.clear();
      System.out.println("Cleared cmds");
      //get last rule
      r = rulelist.remove(rulelist.size()-1);
      System.out.println("Got last rule");
      //get expressions from case
      expr = r.getExpr();
      System.out.println("Got expressions:" + expr);
      //create equality and add to cmds
      eq = new Equality(switcher, expr);
      cmds.add(eq);
      //get statements form case
      s = r.getStatements();
      System.out.println("Added equality for every expr of case");
      System.out.println("Got statements from case");
      //add if statement after equality, with previous else block
      cmds.add(new If(new Var("", ((Var)eq.getOutput()).varnum), new Block(s), b));
      System.out.println("Added if statement after equality");

    }
    //make new block out of previous cmds (first if)

    super.print = new Statements(cmds).print;
  }
}

class Rule extends Expr {
  Expr e;
  Statements s;
  public Rule(Expr e, Statements s) {
    this.e = e;
    this.s = s;
  }
  public Expr getExpr() {
    return e;
  }
  public Statements getStatements() {
    return s;
  }
}

class Macro extends Cmd {
  public Macro(Var target, String path, Expr input) {
    ArrayList<Cmd> cmds = new ArrayList<Cmd>();
    ArrayList<Var> currentVarList = ProgramToData.varList;
    LinkedList<Cmd> currentEqStack = ProgramToData.equalityStack;
    try {
      java.util.Scanner scanner = new java.util.Scanner(new java.io.File(path));
      String text = scanner.useDelimiter("\u005c\u005cA").next();
      scanner.close();
      String macroProgram = ProgramToData.parser.run(text);

      //assign Expr to input of macro program
      cmds.add(new Assign(Integer.parseInt(Character.toString(macroProgram.charAt(4))), input));

      //add block
      String macroProgramBlock = text.substring(text.indexOf("{")+1, text.lastIndexOf("}"));
      Statements s = new ProgramToData(new java.io.StringReader(macroProgramBlock)).statements();
      for (Cmd c : s.cmds) {
        cmds.add(c);
      }

      cmds.add(new Assign(target.varnum, new Var("", Integer.parseInt(Character.toString(macroProgram.charAt(macroProgram.length()-4))))));

      ProgramToData.varList = currentVarList; //re-assign varlist when done
      ProgramToData.equalityStack = currentEqStack;
      super.print = new Statements(cmds).print;
    } catch (ParseException e) {

    } catch (java.io.FileNotFoundException e) {
    }
  }
}
