options {
  STATIC=false;
}

PARSER_BEGIN(ProgramToData)
  
  
import java.util.ArrayList;
import java.util.LinkedList;


public class ProgramToData {
  
  //global variables
  public static ArrayList<Var> varList;
  public static int varnum = 0;
  public static LinkedList<Cmd> equalityStack = new LinkedList<Cmd>();
  public static ProgramToData parser = null;
  
  public static void main(String[] args) {
    try {
      java.util.Scanner scanner = new java.util.Scanner(new java.io.File(args[0]));
      String text = scanner.useDelimiter("\u005c\u005cA").next();
      scanner.close();
      System.out.println(run(text));
    } catch (Throwable e) {
    }
  }
  
  public static String run(String input) throws ParseException {
    String programAsData;
    try { //args[0]
      programAsData = new ProgramToData(new java.io.StringReader(input)).start();
      
      String indented = "";
      int indent = 0;
      String[] lines;

      lines = programAsData.split(System.getProperty("line.separator"));

      //System.out.println("PROGRAM AS DATA:\n" + programAsData);

      for(String s : lines) { //for every line
        if(s.contains(">")){ indent += 2; } //if > then +2
        if(s.contains("<")){ indent -= 2; } //if < then -2
        s = s.replaceAll(">", "");
        s = s.replaceAll("<", "");
        indented += new String(new char[indent]).replace("\0", " ") + s + "\n";
      }
      return indented;
      
    } catch (Throwable e) {
      System.out.println("Syntax check failed: " + e.getMessage());
      throw e;
    }
  }
}

class Program { //[progname, varnum1, "S", varnum2]
  String print;
  
  public Program(Var varnum1,
          Block block,
          Var varnum2) {
    this.print = "[\n>" + varnum1.varnum + ",\n" + block.print + ",\n" + varnum2.varnum + "\n<]";
  }
}

class Block {
  String print;
  Statements statements;
  public Block(Statements statements) {
    this.statements = statements;
    this.print = "[\n>" + statements.print + "\n<]";
  }
}

class Statements {
  ArrayList<Cmd> cmds;
  String print;
  public Statements(ArrayList<Cmd> cmds) {
    this.cmds = cmds;
    String getAllCmds = ""; //cumulative string for commands
    if(cmds.isEmpty()) { //if empty statements
      this.print = "";
    } else { //if not empty statements
      //System.out.println("Size:"+cmds.size() + " |" + cmds);
      for(int i = 0; i < cmds.size(); i++) { //for each cmd
        getAllCmds += cmds.get(i).print; //add cmd to string
        if(i != cmds.size()-1) { //if not last object
          getAllCmds += ",\n"; //include comma
        }
      }
      this.print = getAllCmds; //add square brackets around
    }
  }
}

abstract class Cmd { String print; }
class Assign extends Cmd { //[:=, varnum, "E"]
  public Assign(int V, Expr E) {
    super.print = "[:=, " + V + ", " + E.print + "]";
  }
}
class While extends Cmd { //[while, "E", "B"]
  public While(Expr E, Block B) {
    super.print = "[while, " + E.print + ",\n>" + B.print + "\n<]";
  }
}
class If extends Cmd { //[if, "E", "Bt", "Be"]
  public If(Expr E, Block Bt, Block Be) {
    super.print = "[if, " + E.print + ",\n>" + Bt.print + ",\n " + Be.print + "\n<]";
  }
  public If(Expr E, Block B) {
    super.print = "[if, " + E.print + ",\n>" + B.print + ",\n< []\n]";
  }
  
}

abstract class Expr { String print; }

class Nil extends Expr { //[nil]
  public Nil() { super.print = "[quote, nil]"; }
}
class Var extends Expr { //[var, varnum]
  String name;
  int varnum;
  public Var(String name, int varnum) {
    this.name = name;
    this.varnum = varnum;
    super.print = "[var, " + varnum + "]";
  }
}
class Cons extends Expr { //[cons, "E", "F"]
  public Cons(Expr E, Expr F) {
    super.print = "[cons, " + E.print + ", " + F.print + "]";
  }
}
class Hd extends Expr { //[hd, "E"]
  public Hd(Expr E) {
    super.print = "[hd, " + E.print + "]";
  }
}
class Tl extends Expr { //[tl, "E"]
  public Tl(Expr E) {
    super.print = "[tl, " + E.print + "]";
  }
}
class Num extends Expr { //[cons, nil, nil]
  public Num(String s) {
    Expr num;
    if (s.equals("0")) { //if num < 1
      num = new Nil();
    } else { //if num > 0
      num = new Cons(new Nil(), new Nil());
      for (int i = 1; i < Integer.parseInt(s); i++) {
        num = new Cons(new Nil(), num);
      }
    }
    super.print = num.print;
  }
}

class Bool extends Expr { //nil or [cons, nil,nil]
  public Bool(String s) {
    Expr bool;
    if (s.equals("true")) { //if bool is true
      bool = new Cons(new Nil(), new Nil());
    } else { //if bool is false
      bool = new Nil();
    }
    super.print = bool.print;
  }
}

class Atom extends Expr {
  public Atom(String s) {
    Expr atom = new Nil();
    switch (s) {
      case "quote":
        atom = makeTree(1);
        break;
      case "var":
        atom = makeTree(2);
        break;
      case "cons":
        atom = makeTree(3);
        break;     
      case "hd":
        atom = makeTree(4);
        break;
      case "tl":
        atom = makeTree(5);
        break;
      case ":=":
        atom = makeTree(6);
        break;
      case "while":
        atom = makeTree(7);
        break;
      case "if":
        atom = makeTree(8);
        break;
    }
    super.print = atom.print;
  }
  
  private Expr makeTree(int generations) {
    Expr returnTree = new Nil();
    for (int i = 0; i < generations; i++) {
      returnTree = new Cons(returnTree, new Nil());
    }
    return returnTree;
  }
}

class List extends Expr { //cons all elements to nil to construct list
  public List(ArrayList<Expr> el) {
    Expr list = el.remove(el.size()-1);
    for (int i=el.size()-1; i >= 0; i--) { //go through list reverse
      list = new Cons(el.get(i), list);
    }
    list = new Cons(list, new Nil());
    super.print = list.print;
  }
}

class Equality extends Cmd {
  Expr output;
  public Equality(Expr e1, Expr e2) {
    this.output = new Var("", ProgramToData.varnum+1); //output variable
    
    //Command array list for every command of equals.while
    ArrayList<Cmd> cmds = new ArrayList<Cmd>();
    
    //Assign e1 to input
    cmds.add(new Assign(ProgramToData.varnum+0, new Cons(e1, new Cons(e2, new Nil()))));
    
    //Assigns before while
    cmds.add(new Assign(ProgramToData.varnum+1, new Cons(new Nil(), new Nil())));
    cmds.add(new Assign(ProgramToData.varnum+2, new Hd(new Var("", ProgramToData.varnum+0))));
    cmds.add(new Assign(ProgramToData.varnum+3, new Hd(new Tl(new Var("", ProgramToData.varnum+0)))));
    cmds.add(new Assign(ProgramToData.varnum+4, new Cons(new Var("", ProgramToData.varnum+3),
                                                         new Cons(new Var("", ProgramToData.varnum+2), new Nil())
                                                        )));
    
    //Make while command
    ArrayList<Cmd> whileCmd = new ArrayList<Cmd>();
    //assigns
    whileCmd.add(new Assign(ProgramToData.varnum+5, new Hd(new Var("", ProgramToData.varnum+4))));
    whileCmd.add(new Assign(ProgramToData.varnum+4, new Tl(new Var("", ProgramToData.varnum+4))));
    whileCmd.add(new Assign(ProgramToData.varnum+6, new Hd(new Var("", ProgramToData.varnum+4))));
    whileCmd.add(new Assign(ProgramToData.varnum+4, new Tl(new Var("", ProgramToData.varnum+4))));
    
    //first nested if, then block
    ArrayList<Cmd> firstNestedIfThen = new ArrayList<Cmd>();
    firstNestedIfThen.add(new Assign(ProgramToData.varnum+4,
                               new Cons(new Tl(new Var("", ProgramToData.varnum+5)),
                                        new Cons(new Tl(new Var("", ProgramToData.varnum+6)), new Var("", ProgramToData.varnum+4))
                                       )
                              )
                   );
    firstNestedIfThen.add(new Assign(ProgramToData.varnum+4,
                               new Cons(new Hd(new Var("", ProgramToData.varnum+5)),
                                        new Cons(new Hd(new Var("", ProgramToData.varnum+6)), new Var("", ProgramToData.varnum+4))
                                       )
                              )
                   );
    //first nested if, else block
    ArrayList<Cmd> firstNestedIfElse = new ArrayList<Cmd>();
    firstNestedIfElse.add(new Assign(ProgramToData.varnum+1,new Nil()));
    firstNestedIfElse.add(new Assign(ProgramToData.varnum+4, new Nil()));
    
    //create first nested if and add to first if then
    ArrayList<Cmd> firstIfThen = new ArrayList<Cmd>();
    firstIfThen.add(new If(new Var("", ProgramToData.varnum+5),
                           new Block(new Statements(firstNestedIfThen)),
                           new Block(new Statements(firstNestedIfElse))
                          )
                );
    
    //second nested if, then block
    ArrayList<Cmd> secondNestedIfThen = new ArrayList<Cmd>();
    secondNestedIfThen.add(new Assign(ProgramToData.varnum+1, new Nil()));
    secondNestedIfThen.add(new Assign(ProgramToData.varnum+4, new Nil()));
    //create second nested if and add to first if else
    ArrayList<Cmd> firstIfElse = new ArrayList<Cmd>();
    firstIfElse.add(new If(new Var("", ProgramToData.varnum+5),
                       new Block(new Statements(secondNestedIfThen))
                      )
               );
      
    whileCmd.add(new If(new Var("", ProgramToData.varnum+6),
                            new Block(new Statements(firstIfThen)),
                            new Block(new Statements(firstIfElse))
                          )
                );
    //add while
    cmds.add(new While(new Var("", ProgramToData.varnum+4), new Block(new Statements(whileCmd))));
    
    
    if (true) {
      super.print = new Statements(cmds).print;
      ProgramToData.varnum += 7;
    } else {
      ArrayList<Cmd> list = new ArrayList<Cmd>();
      list.add(new Assign(ProgramToData.varnum, new Num("2")));
      super.print = new Statements(list).print;
    } 
  }
  public Expr getOutput() { return output; }
}

class Switch extends Cmd {
  public Switch(Expr switcher, ArrayList<Rule> rulelist, Statements def) {
    //do last case first, as it isn't an IF-ELSE, just IF
    //get last rule
    Rule r = rulelist.remove(rulelist.size()-1);
    System.out.println("Got last rule");
    //make new ArrayList<Cmd> to make a block
    ArrayList<Cmd> cmds = new ArrayList<Cmd>();
    System.out.println("Created cmds");
    //get expressions from case
    Expr expr = r.getExpr();
    System.out.println("Got expression:" + expr);
    //create equality and add to cmds
    Equality eq = new Equality(switcher, expr);
    cmds.add(eq);
    //get statements from case
    Statements s = r.getStatements();
    System.out.println("Added equality for every expr of case");
    //get statements from case
    System.out.println("Got statements from case");
    
    //add if statement after equality depending on default
    if (def == null) {
      cmds.add(new If(new Var("", ((Var)eq.getOutput()).varnum), new Block(s)));
    } else {
      cmds.add(new If(new Var("", ((Var)eq.getOutput()).varnum), new Block(s), new Block(def)));
    }
    System.out.println("Added if statement after equality");
    
    //for each case
    while (!rulelist.isEmpty()) {
      //make previous case a block to put in this if's else
      Block b = new Block(new Statements(cmds));
      System.out.println("Made block out of previous cmds");
      //clear cmds
      cmds.clear();
      System.out.println("Cleared cmds");
      //get last rule
      r = rulelist.remove(rulelist.size()-1);
      System.out.println("Got last rule");
      //get expressions from case
      expr = r.getExpr();
      System.out.println("Got expressions:" + expr);
      //create equality and add to cmds
      eq = new Equality(switcher, expr);
      cmds.add(eq);
      //get statements form case
      s = r.getStatements();
      System.out.println("Added equality for every expr of case");
      System.out.println("Got statements from case");
      //add if statement after equality, with previous else block
      cmds.add(new If(new Var("", ((Var)eq.getOutput()).varnum), new Block(s), b));
      System.out.println("Added if statement after equality");
      
    }
    //make new block out of previous cmds (first if)
    
    super.print = new Statements(cmds).print;
  }
}

class Rule extends Expr {
  Expr e;
  Statements s;
  public Rule(Expr e, Statements s) {
    this.e = e;
    this.s = s;
  }
  public Expr getExpr() {
    return e;
  }
  public Statements getStatements() {
    return s;
  }
}

class Macro extends Cmd {
  public Macro(Var target, String path, Expr input) {
    ArrayList<Cmd> cmds = new ArrayList<Cmd>();
    ArrayList<Var> currentVarList = ProgramToData.varList;
    LinkedList<Cmd> currentEqStack = ProgramToData.equalityStack;
    try {
      java.util.Scanner scanner = new java.util.Scanner(new java.io.File(path));
      String text = scanner.useDelimiter("\u005c\u005cA").next();
      scanner.close();
      String macroProgram = ProgramToData.parser.run(text);
      
      //assign Expr to input of macro program
      cmds.add(new Assign(Integer.parseInt(Character.toString(macroProgram.charAt(4))), input));
      
      //add block
      String macroProgramBlock = text.substring(text.indexOf("{")+1, text.lastIndexOf("}"));
      Statements s = new ProgramToData(new java.io.StringReader(macroProgramBlock)).statements();
      for (Cmd c : s.cmds) {
        cmds.add(c);
      }

      cmds.add(new Assign(target.varnum, new Var("", Integer.parseInt(Character.toString(macroProgram.charAt(macroProgram.length()-4))))));

      ProgramToData.varList = currentVarList; //re-assign varlist when done
      ProgramToData.equalityStack = currentEqStack;
      super.print = new Statements(cmds).print;
    } catch (ParseException e) {
      
    } catch (java.io.FileNotFoundException e) {
    }
  }
}
  
PARSER_END(ProgramToData)

// SKIP characters, white space, new lines and comments
SKIP: { " " | "\t" | "\r" | "\n"
        // initial //, anything but new line, new line
        | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //single line
        //multi-line comments
        | <"(*" (~["*"])* "*" (~["*",")"] (~["*"])* "*" | "*")* ")">
      }

// TOKEN KEYWORDS
TOKEN: {
    <READ: "read"   >
  | <WRITE: "write" >
  | <ASSIGN: ":="   >
  | <WHILE: "while" >
  | <IF: "if"       >
  | <ELSE: "else"   >
  | <CONS: "cons"   >
  | <HD: "hd"       >
  | <TL: "tl"       >
}

// TOKEN EXTENSIONS
TOKEN: {
    <BOOL: "true"|"false"   >
  | <SWITCH: "switch"       >
  | <CASE: "case"           >
  | <DEFAULTCASE: "default" >
  | <ATOM: "quote"|"var"    >
}
    
// TOKEN IDENTIFIERS
TOKEN: {
    <NIL: "nil">  
  | <VAR: ["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9","_","-","$"])*>
  | <NUM: (["0"-"9"])+ >
  | <NAME: (["A"-"Z","a"-"z","0"-"9","_","-","/","\\","$","."])+>
}

String start():{
  varList = new ArrayList<Var>();
  Program p;
}
{
  p=program()
  <EOF> { return p.print; }
}

Program program(): {Var input; Block S; Var output;} {
  <VAR> //no call to variable() because it shouldn't be added in the data
  <READ>
  input=variable()
  S=block()
  <WRITE>
  output=variable() {
    for (Var v : varList) {
      System.out.println(v.name);
    }
    return new Program(input, S, output);
  }
}
  
Block block():{
  Block b;
  Statements s = new Statements(new ArrayList<Cmd>());
} {
  "{" (s=statements())? "}" {
    b = new Block(s);
    return b;
  }
}
  
Statements statements():{
  Statements s;
  Statements s2 = new Statements(new ArrayList<Cmd>());
  ArrayList<Cmd> cmds = new ArrayList<Cmd>(); //List of commands
  LinkedList<Cmd> currentCmd = new LinkedList<Cmd>();
}
{
  currentCmd=command(currentCmd) {
      for(Cmd cmd : currentCmd) {
        cmds.add(cmd);
      }
  }
  (";" s2=statements())? {
    for(Cmd cmd : s2.cmds) {
      cmds.add(cmd);
    }
    s = new Statements(cmds);
    return s;
  }
}

LinkedList<Cmd> command(LinkedList<Cmd> currentCmd):{ Var v; 
                            Expr e;
                            Block b;
                            Block b2 = null;
                              Token t;
              }
{
  //ASSIGN (VAR <ASSIGN> <EXPR>)
  v=variable()
  <ASSIGN>
  (
    "<" t=<NAME> ">"
    e=expr() {
      while (!equalityStack.isEmpty()) {
        currentCmd.addLast(equalityStack.pop());
      }
      currentCmd.addLast(new Macro(v, t.image, e));
      return currentCmd;
    }
  |
    e=expr() {
      while (!equalityStack.isEmpty()) {
        currentCmd.addLast(equalityStack.pop());
      }
      currentCmd.addLast(new Assign(v.varnum, e));
      return currentCmd;
    }
  )
  
  
  //WHILE (WHILE <EXPR> <BLOCK>)
  | <WHILE> e=expr() {
      LinkedList<Cmd> whileEqStack = new LinkedList<Cmd>();
      for (Cmd c : equalityStack) {
        currentCmd.addLast(c);
        whileEqStack.addLast(c);
      }
      equalityStack.clear();
    }
    b=block() {
      ArrayList<Cmd> whileListCmds = new ArrayList<Cmd>();
      //add cmds from block to new block
      for (Cmd c : b.statements.cmds) {
        whileListCmds.add(c);
      }
      //add equality check from expr to new block
      for (Cmd c : whileEqStack) {
        whileListCmds.add(c);
      }
      //create new statements
      
      b = new Block(new Statements(whileListCmds));
      currentCmd.addLast(new While(e, b));
      return currentCmd;
    }

  //IF (IF <EXPR> <BLOCK> <ELSEBLOCK>)
  | <IF> e=expr() {
      while (!equalityStack.isEmpty()) {
        currentCmd.add(equalityStack.pop());
      }
    }
    b=block()(LOOKAHEAD(<ELSE>) <ELSE> b2=block())? {
      if(b2 == null) { //no else
        currentCmd.addLast(new If(e, b));
        return equalityStack;
      } else { //else
        currentCmd.addLast(new If(e, b, b2));
        return currentCmd;
      }
    }
  
  //SWITCH
  | <SWITCH> e=expr() {
      while (!equalityStack.isEmpty()) {
        currentCmd.addLast(equalityStack.pop());
      }
    }
    "{"
    {ArrayList<Rule> rulelist = new ArrayList<Rule>();
    Statements def = null;}
    rulelist=ruleList(rulelist)
    (<DEFAULTCASE> ":" def=statements())?
    "}"
    { currentCmd.addLast(new Switch(e, rulelist, def));
      return currentCmd;
    } 
}

ArrayList<Rule> ruleList(ArrayList<Rule> rulelist): {
  Rule r;
  ArrayList<Expr> exprList = new ArrayList<Expr>();
  Statements s;
} {
  <CASE> exprList=exprList(exprList) ":" s=statements() {
    for (Expr e : exprList) {
      rulelist.add(new Rule(e, s));
    }
  }
  (
    rulelist=ruleList(rulelist)
   |
    { return rulelist; }
   )
}

Expr expr():{Expr e,e2;} {
  LOOKAHEAD(expr2() "=")
  e=expr2() "=" e2=expr() {
    Equality eq = new Equality(e, e2);
    ProgramToData.equalityStack.add(eq);
    return eq.getOutput();
  }
  |
  e=expr2() { return e; }
}

Expr expr2():{Expr e; Var v; Token t;} {
    <NIL> { return new Nil(); }
  
  | LOOKAHEAD(<CONS> expr() expr())
    <CONS> { Expr e2; } e=expr() e2=expr() { return new Cons(e, e2); }
    |
    t=<CONS> { return new Atom(t.image); }  
  
  | LOOKAHEAD(<HD> expr())
    <HD> e=expr() { return new Hd(e); }
    |
    t=<HD> { return new Atom(t.image); }
  
  | LOOKAHEAD(<TL> expr())
    <TL> e=expr() { return new Tl(e); }
    |
    t=<TL> { return new Atom(t.image); }
  
  | v=variable() { return v; }
  
  | t=<NUM> { return new Num(t.image); }
  
  | t=<BOOL> { return new Bool(t.image); }
  
  | "[" {ArrayList<Expr> exprlist = new ArrayList<Expr>();
        ArrayList<Expr> el = new ArrayList<Expr>();}
    (el=exprList(exprlist))? "]" {
      System.out.println(el);
      return new List(el);
    }
  
  | (t=<ATOM>|t=<ASSIGN>|t=<WHILE>|t=<IF>) { return new Atom(t.image); }
  
  | "(" e=expr() ")" { return e; }
}

ArrayList<Expr> exprList(ArrayList<Expr> list):{Expr e;} {
  LOOKAHEAD(expr() "," exprList())
  e=expr() { list.add(e); }
  "," { return exprList(list); }
  
  | e=expr() {
    list.add(e);
    return list;
  }
}


Var variable():{Token t; Var v;} {
  t=<VAR> { //get token
    //check if var already exists
    int pointer = 0; //points through varList
    //System.out.println("varList:" + varList);
    while (pointer < varList.size()) {
      v = varList.get(pointer); //get var in list
      //System.out.print(t.toString() + "=" + v.name.toString() + "? ");
      //System.out.println(t.toString().equals(v.name));
      if (t.toString().equals(v.name)) {
        //System.out.println(" Found:" + v.name);
        return v; //found var and return it
      }
      pointer += 1;
    }
    //variable does not exist
    v = new Var(t.toString(), varnum); //create new var
    varnum += 1; //increment var counter
    varList.add(v); //add var to varlist
    //System.out.println("New Var: " + v.name + v.print);
    return v; //return new Var object with value
  }
}