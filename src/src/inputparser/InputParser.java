/* InputParser.java */
/* Generated By:JavaCC: Do not edit this line. InputParser.java */
package src.inputparser;

import src.datatype.*;
import java.util.LinkedList;
import src.interpreter.InterpreterException;

public class InputParser implements InputParserConstants {
  private static InputParser parser = null;
  /*
  public static void main(String[] args) {
    try {
      System.out.println(run(args[0]).dataToString());
    } catch (ParseException e) {
      System.out.println(e);
    } catch (InterpreterException e) {
      System.out.println(e.getError());
    }
  }
  */
  public static Data run(String input) throws ParseException, InterpreterException {
    try {
      if (parser == null) {
      parser = new InputParser(new java.io.StringReader(input));
    } else {
      ReInit(new java.io.StringReader(input));
    }
      return parser.programOrExpr();
    } catch (TokenMgrError e) {
      throw new InterpreterException("Token Error", "Check for misspelt words.",  e.getMessage());
    } catch (NumberFormatException e) {
      throw new InterpreterException("NumberFormatException", "Number too big to be an Integer, use a tree.", e.getMessage());
    } /*catch (Exception e) {
      throw new InterpreterException(e.getClass().toString(), "None", e.getMessage());
    }*/
  }

  static final public Data programOrExpr() throws ParseException {Data d = null;
    if (jj_2_1(2147483647)) {
      d = program();
      jj_consume_token(0);
{if ("" != null) return d;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case WHILE:
      case IF:
      case QUOTE:
      case NIL:
      case VAR:
      case CONS:
      case HD:
      case TL:
      case NUM:
      case BOOLEAN:
      case 16:
      case 19:
      case 22:{
        d = expr();
        jj_consume_token(0);
{if ("" != null) return d;}
        break;
        }
      case 0:{
        jj_consume_token(0);
{if ("" != null) return new Nil();}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Data expr() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NIL:{
      jj_consume_token(NIL);
{if ("" != null) return new Nil();}
      break;
      }
    case NUM:{
      t = jj_consume_token(NUM);
{if ("" != null) return new Num(t.image);}
      break;
      }
    case BOOLEAN:{
      t = jj_consume_token(BOOLEAN);
{if ("" != null) return new Bool(t.image);}
      break;
      }
    case ASSIGN:
    case WHILE:
    case IF:
    case QUOTE:
    case VAR:
    case CONS:
    case HD:
    case TL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUOTE:{
        t = jj_consume_token(QUOTE);
        break;
        }
      case VAR:{
        t = jj_consume_token(VAR);
        break;
        }
      case CONS:{
        t = jj_consume_token(CONS);
        break;
        }
      case HD:{
        t = jj_consume_token(HD);
        break;
        }
      case TL:{
        t = jj_consume_token(TL);
        break;
        }
      case ASSIGN:{
        t = jj_consume_token(ASSIGN);
        break;
        }
      case WHILE:{
        t = jj_consume_token(WHILE);
        break;
        }
      case IF:{
        t = jj_consume_token(IF);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new Atom(t.image);}
      break;
      }
    case 19:{
      jj_consume_token(19);
Data d1, d2;
      d1 = expr();
      jj_consume_token(20);
      d2 = expr();
      jj_consume_token(21);
{if ("" != null) return new Tree(d1.getData(), d2.getData());}
      break;
      }
    case 16:{
      if (jj_2_2(2147483647)) {
        jj_consume_token(16);
        jj_consume_token(18);
{if ("" != null) return new Nil();}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 16:{
LinkedList<Data> list = new LinkedList<Data>(); Data d;
          jj_consume_token(16);
          d = exprList(list);
          jj_consume_token(18);
{if ("" != null) return d;}
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case 22:{
      jj_consume_token(22);
Data d;
      d = expr();
      jj_consume_token(23);
{if ("" != null) return d;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public List exprList(LinkedList<Data> list) throws ParseException {Data d; List l;
    if (jj_2_3(2147483647)) {
      d = expr();
list.addLast(d);
      jj_consume_token(17);
      l = exprList(list);
{if ("" != null) return l;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case WHILE:
      case IF:
      case QUOTE:
      case NIL:
      case VAR:
      case CONS:
      case HD:
      case TL:
      case NUM:
      case BOOLEAN:
      case 16:
      case 19:
      case 22:{
        d = expr();
list.addLast(d); {if ("" != null) return new List(list);}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public List program() throws ParseException {Token in, out;
                         List b;
                         LinkedList<Data> programdata = new LinkedList<Data>();
    jj_consume_token(16);
    in = jj_consume_token(NUM);
    jj_consume_token(17);
    b = block();
    jj_consume_token(17);
    out = jj_consume_token(NUM);
    jj_consume_token(18);
programdata.add(new Num(in.image));
    programdata.add(b);
    programdata.add(new Num(out.image));
    {if ("" != null) return new List(programdata);}
    throw new Error("Missing return statement in function");
  }

  static final public List block() throws ParseException {Data d;
                       LinkedList<Data> s = new LinkedList<Data>();
    jj_consume_token(16);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 16:{
      s = statements();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(18);
{if ("" != null) return new List(s);}
    throw new Error("Missing return statement in function");
  }

  static final public LinkedList<Data> statements() throws ParseException {List cmd;
                                        LinkedList<Data> s2 = new LinkedList<Data>();
    cmd = command();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 17:{
      jj_consume_token(17);
      s2 = statements();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
LinkedList<Data> statements = new LinkedList<Data>();
    statements.add(cmd);
    for(Data c: s2) {
      statements.add(c);
    }
    {if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
  }

  static final public List command() throws ParseException {Token num; List e1,e2,e3;
                         LinkedList<Data> cmd = new LinkedList<Data>();
    jj_consume_token(16);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      jj_consume_token(17);
      num = jj_consume_token(NUM);
      jj_consume_token(17);
      e1 = progExpr();
cmd.add(new Atom(":="));
        cmd.add(new Num(num.image));
        cmd.add(e1);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(17);
      e1 = progExpr();
      jj_consume_token(17);
      e2 = block();
cmd.add(new Atom("while"));
        cmd.add(e1);
        cmd.add(e2);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(17);
      e1 = progExpr();
      jj_consume_token(17);
      e2 = block();
      jj_consume_token(17);
      e3 = block();
cmd.add(new Atom("if"));
        cmd.add(e1);
        cmd.add(e2);
        cmd.add(e3);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(18);
{if ("" != null) return new List(cmd);}
    throw new Error("Missing return statement in function");
  }

  static final public List progExpr() throws ParseException {Token num;
                          List e1,e2;
                          LinkedList<Data> expr = new LinkedList<Data>();
    jj_consume_token(16);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case QUOTE:{
      jj_consume_token(QUOTE);
      jj_consume_token(17);
      jj_consume_token(NIL);
expr.add(new Atom("quote"));
        expr.add(new Nil());
      break;
      }
    case VAR:{
      jj_consume_token(VAR);
      jj_consume_token(17);
      num = jj_consume_token(NUM);
expr.add(new Atom("var"));
        expr.add(new Num(num.image));
      break;
      }
    case CONS:{
      jj_consume_token(CONS);
      jj_consume_token(17);
      e1 = progExpr();
      jj_consume_token(17);
      e2 = progExpr();
expr.add(new Atom("cons"));
        expr.add(e1);
        expr.add(e2);
      break;
      }
    case HD:{
      jj_consume_token(HD);
      jj_consume_token(17);
      e1 = progExpr();
expr.add(new Atom("hd"));
        expr.add(e1);
      break;
      }
    case TL:{
      jj_consume_token(TL);
      jj_consume_token(17);
      e1 = progExpr();
expr.add(new Atom("tl"));
        expr.add(e1);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(18);
{if ("" != null) return new List(expr);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(CONS)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_scan_token(19)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(20)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(21)) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_7()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(QUOTE)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_3R_4()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_5()
 {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  static private boolean jj_3R_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_1()
 {
    if (jj_scan_token(16)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(16)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    }
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_1()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_2()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(TL)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_2()) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(22)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(16)) return true;
    if (jj_3R_3()) return true;
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(HD)) return true;
    if (jj_scan_token(17)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(17)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(16)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(18)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public InputParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x49ffe1,0x3de0,0x10000,0x49ffe0,0x49ffe0,0x10000,0x20000,0xe0,0x3d00,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public InputParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public InputParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new InputParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public InputParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InputParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public InputParser(InputParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(InputParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
