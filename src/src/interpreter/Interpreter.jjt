/*
ProgramParser for simple WHILE
Version 0.2.3
*/

options {
  MULTI=true;
  VISITOR=true;
  NODE_DEFAULT_VOID=true;
  NODE_EXTENDS="BaseNode";
  STATIC=false;
  DEBUG_PARSER=false;
}

PARSER_BEGIN(ProgramParser)

package src.interpreter;

import src.datatype.*;
import java.io.FileNotFoundException;
import java.util.HashMap;

public class ProgramParser {
  
  /**
  * input to program in string from
  */
  private static String stringInput;
  /**
  * input to program in data form
  */
  private static Data dataInput;
  /**
  * program code in a stringReader object
  */
  private static java.io.StringReader programCode;
  /**
  * debugger (to get information from debugging)
  */
  public Debugger debugger;
  
  
  /**
  * command line call
  */
  public static void main(String[] args) throws ParseException, InterpreterException, src.inputparser.ParseException { 
    if (args.length == 2) {
      ProgramParser parser = new ProgramParser(args);
      System.out.println(parser.runProgram().dataToString());
    } else {
      System.out.println("Call format: <path> <input>");
    }
    
  }
  
  /**
  * constructor for IDE (makes an object without args[] from main)
  */
  public ProgramParser(String prog, String input) {
    ProgramParser.programCode = new java.io.StringReader(prog);
    ProgramParser.stringInput = input;
    //System.out.println("Program: " + prog + " - input: " + programInput);
  }
  
  /**
  * constructor for cmd line
  */
  public ProgramParser(String[] args) throws InterpreterException {
    java.util.Scanner scanner;
    String text = "";
    try {
      scanner = new java.util.Scanner(new java.io.File(args[0]));
      text = scanner.useDelimiter("\u005c\u005cA").next();
      scanner.close();
      ProgramParser.programCode = new java.io.StringReader(text);
    } catch (FileNotFoundException ex) {
      throw new InterpreterException("FileNotFoundException", "Check file path.", ex.getMessage());
    }
    ProgramParser.stringInput = args[1];
  }
  
  /**
  * parse program
  */
  public ASTProgram parseProgram() throws ParseException {
    //make new AST node for program and launch parser (ASTProgram = root node)
    //System.out.println("programCode:" + programCode);
    ProgramParser parser = new ProgramParser(programCode);
    ASTProgram program = parser.program();
    //print AST
    //program.dump(""); //remove this at the end (or make feature)
    //if reach here, parsing was without errors
    return program;
  }
  
  /**
  * run program
  */
  public Data runProgram() throws ParseException, InterpreterException, src.inputparser.ParseException {
    //parse input
    dataInput = src.inputparser.InputParser.run(stringInput);
    //parse program + get parser
    ASTProgram program = parseProgram();
    //new interpreter (visitor)
    ProgramVisitor v = new ProgramVisitor();
    //start interpreter and accept first node, print result
    Data output = (Data) program.jjtAccept(v, null);
    return output;
  }
  
  /**
  * debug program
  */
  @SuppressWarnings(value = "unchecked")
  public HashMap<String, Data> debugProgram(int shouldVisit) throws ParseException, InterpreterException, src.inputparser.ParseException {
    //parse input
    dataInput = src.inputparser.InputParser.run(stringInput);
    //parse program + get parser
    ASTProgram program = parseProgram();
    //new interpreter (debug)
    try {
      debugger = new Debugger(shouldVisit);
      //start debugger and accept first node, print result
      return (HashMap<String, Data>) program.jjtAccept(debugger, null);
    } catch (Error e) {
      String[] l = e.getMessage().split("|");
      throw new InterpreterException(l[0], l[1], l[2]);
    } 
  }
  
}

PARSER_END(ProgramParser)

// SKIP characters, white space, new lines and comments
SKIP: { " " | "\t" | "\r" | "\n"
        // initial //, anything but new line, new line
        | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //single line
        //multi-line comments
        | <"(*" (~["*"])* "*" (~["*",")"] (~["*"])* "*" | "*")* ")">
      }

// TOKEN KEYWORDS
TOKEN: {
    <READ: "read"             >
  | <WRITE: "write"           >
  | <ASSIGN: ":="             >
  | <WHILE: "while"           >
  | <IF: "if"                 >
  | <ELSE: "else"             >
  | <CONS: "cons"             >
  | <NIL: "nil"> 
  | <HD: "hd"                 >
  | <TL: "tl"                 >
  | <SWITCH: "switch"         >
  | <CASE: "case"             >
  | <DEFAULTCASE: "default"   >
  | <DOT: "."                 >
  | <ATOM: "quote"|"var">
}
    
// TOKENS IDENTIFIERS
TOKEN: {
    <BOOLEAN: "true" | "false">
  | <VAR: ["A"-"Z","a"-"z","/"](["A"-"Z","a"-"z","0"-"9","_","-","$","/","\\","."])*>
  | <NUM: (["0"-"9"])+>
}

/**
* #Program
* gets progname, input, block, and output. Returns itself.
*/
ASTProgram program() #Program: {} {
  progname() <READ> input() block() <WRITE> output()
  <EOF>
  {return jjtThis;}
}

/**
* #progname
* puts name in node data
*/
void progname() #progname: {Token t;} {
  t=<VAR> {
    jjtThis.data.put("progname", t.image);
  }
}

/**
* #input
* puts input var and input in node data
*/
void input() #input: {Token t;} {
  t=<VAR> {
    jjtThis.data.put("inputVar", t.image);
    jjtThis.data.put("input", dataInput);
  }
}

/**
* #output
* puts output var in node data
*/
void output() #output: {Token t;} {
  t=<VAR> {
    jjtThis.data.put("outputVar", t.image);
  }
}

/**
* #Block
* gets statements
*/
void block() #Block: {} {
  "{" (statements())? "}"
}

/**
* statements
*/
void statements(): {} {
  command() (";" statements())?
}

/**
* command
* creates a node from the command parsed
* nodes: #Assign, #Macro, #While, #If, #Switch
*/
void command():{} {
  //ASSIGN (<VAR> <ASSIGN> <EXPR>)or(<VAR> <ASSIGN> <PROG> <EXPR>)
  (
    LOOKAHEAD(variable() <ASSIGN> "<" variable() ">" expr())
    ( variable() <ASSIGN> ("<" variable() ">" expr())#Macro ) #Assign
    |
    ( variable() <ASSIGN>  expr() ) #Assign
  )
  //WHILE (<WHILE> <EXPR> <BLOCK>)
  |( <WHILE> expr() block() ) #While
  
  //IF (<IF> <EXPR> <BLOCK> (<ELSE> <BLOCK>)?)
  |( <IF> expr() block() (LOOKAHEAD(<ELSE>) <ELSE> block())? ) #If
    
  //SWITCH (<SWITCH> <EXPR> (<RULE>)+ (<DEFAULTCASE>)?)
  |( <SWITCH> expr() "{" (rule())+ (defaultCase())? "}" ) #Switch
}

/**
* #Case
* creates a case node with an ExprList and a Block
*/
void rule() #Case: {} {
  <CASE> exprList()#ExprList ":" statements()#Block
}

/**
* #DefaultCase
* creates 
*/
void defaultCase() #DefaultCase: {} {
  <DEFAULTCASE> ":" statements()#Block
}

/**
* expr
* checks if expr is an equality #Equal
*/
void expr(): {Token t;} {
  LOOKAHEAD(expr2() "=")
  (expr2() "=" expr()) #Equal
  |
  expr2()
}

/**
* expr2
* cannot be an equality
* nodes: #nil, #Cons, #Hd, #Tl, var, #num, #bool, #ExprList, #atom
*/
void expr2(): {Token t;} {
  <NIL> #nil
  
  | LOOKAHEAD(<CONS> expr() expr())
    ( <CONS> expr() expr() ) #Cons
    |
    t=<CONS> {jjtThis.data.put("atom", t.image);} #atom
  
  | LOOKAHEAD(<HD> expr())
    ( <HD> expr() ) #Hd
    |
    t=<HD> {jjtThis.data.put("atom", t.image);} #atom
  
  | LOOKAHEAD(<TL> expr())
    ( <TL> expr() ) #Tl
    |
    t=<TL> {jjtThis.data.put("atom", t.image);} #atom
  
  | variable()
    
  | t=<NUM> {
      jjtThis.data.put("num", t.image);
    }#num
    
  | t=<BOOLEAN> {
      jjtThis.data.put("boolean", t.image);
    }#bool
    
  |( "[" (exprList())? "]" ) #ExprList
    
  | (t=<ATOM>|t=<ASSIGN>|t=<WHILE>|t=<IF>) {
      jjtThis.data.put("atom", t.image);
    }#atom
  
  | "(" expr() ")"
}
  
/**
* #var
* puts variable name in node data
*/
void variable() #var: {Token t;} {
  t=<VAR> {jjtThis.data.put("varname", t.image);}
}

/**
* exprList
* has 1 or more expressions separated by ","
*/
void exprList(): {} {
  LOOKAHEAD(expr() "," exprList())
  expr() "," exprList() | expr()
}