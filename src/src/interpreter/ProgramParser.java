/* ProgramParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ProgramParser.java */
package src.interpreter;

import src.datatype.*;
import java.io.FileNotFoundException;
import java.util.HashMap;

public class ProgramParser/*@bgen(jjtree)*/implements ProgramParserTreeConstants, ProgramParserConstants {/*@bgen(jjtree)*/
  protected JJTProgramParserState jjtree = new JJTProgramParserState();
  //global variables
  private static String stringInput;
  private static Data dataInput;
  private static java.io.StringReader programCode; //program code
  public Debugger debugger;


  //command line call
  public static void main(String[] args) throws ParseException, InterpreterException, src.inputparser.ParseException {

    System.out.println("args:" + java.util.Arrays.toString(args));
    if (args.length == 2) {
      ProgramParser parser = new ProgramParser(args);
      System.out.println(parser.runProgram().dataToString());
    } else {
      System.out.println("Call format: <path> <input>");
    }

  }

  //constructor for IDE (makes an object without args[] from main)
  public ProgramParser(String prog, String input) {
    ProgramParser.programCode = new java.io.StringReader(prog);
    ProgramParser.stringInput = input;
    //System.out.println("Program: " + prog + " - input: " + programInput);
  }

  // constructor for cmd line
  public ProgramParser(String[] args) throws InterpreterException {
    java.util.Scanner scanner;
    String text = "";
    try {
      scanner = new java.util.Scanner(new java.io.File(args[0]));
      text = scanner.useDelimiter("\u005c\u005cA").next();
      scanner.close();
      ProgramParser.programCode = new java.io.StringReader(text);
    } catch (FileNotFoundException ex) {
      throw new InterpreterException("FileNotFoundException", "Check file path.", ex.getMessage());
    }
    ProgramParser.stringInput = args[1];
    System.out.println("Program: " + args[0] + " - input: " + stringInput);
    //System.out.println("code\n" + text + "\n---Done");
  }

  //parse program
  public ASTProgram parseProgram() throws ParseException {
    //make new AST node for program and launch parser (ASTProgram = root node)
    //System.out.println("programCode:" + programCode);
    ProgramParser parser = new ProgramParser(programCode);
    ASTProgram program = parser.program();
    //print AST
    //program.dump(""); //remove this at the end (or make feature)
    //if reach here, parsing was without errors
    System.out.println("Syntax correct");
    return program;
  }

  //run program
  public Data runProgram() throws ParseException, InterpreterException, src.inputparser.ParseException {
    //parse input
    dataInput = src.inputparser.InputParser.run(stringInput);
    //parse program + get parser
    ASTProgram program = parseProgram();
    //new interpreter (visitor)
    ProgramVisitor v = new ProgramVisitor();
    //start interpreter and accept first node, print result
    try {
    Data output = (Data) program.jjtAccept(v, null);
    return output;
    } catch (InterpreterException e) {
    System.out.println(e.getError() + " " + e.getSuggestion() + " " + e.getMessage());
        throw new InterpreterException(e.getError(), e.getSuggestion(), e.getErrorMessage());
    }
  }

  //debug program
  @SuppressWarnings(value = "unchecked")
  public HashMap<String, Data> debugProgram(int shouldVisit) throws ParseException, InterpreterException, src.inputparser.ParseException {
    //parse input
    dataInput = src.inputparser.InputParser.run(stringInput);
    //parse program + get parser
    ASTProgram program = parseProgram();
    //new interpreter (debug)
    try {
      debugger = new Debugger(shouldVisit);
      //start debugger and accept first node, print result
      return (HashMap<String, Data>) program.jjtAccept(debugger, null);
    } catch (Error e) {
      String[] l = e.getMessage().split("|");
      throw new InterpreterException(l[0], l[1], l[2]);
    }
  }

  final public ASTProgram program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      progname();
      jj_consume_token(READ);
      input();
      block();
      jj_consume_token(WRITE);
      output();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void progname() throws ParseException {Token t;
    t = jj_consume_token(VAR);
ASTprogname jjtn001 = new ASTprogname(JJTPROGNAME);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
//put program name in data
    jjtn001.data.put("progname", t.image);
    } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
    }
  }

  final public void input() throws ParseException {Token t;
    t = jj_consume_token(VAR);
ASTinput jjtn001 = new ASTinput(JJTINPUT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
    try {
jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
jjtn001.data.put("inputVar", t.image);
    jjtn001.data.put("input", dataInput);
    } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
    }
  }

  final public void output() throws ParseException {/*@bgen(jjtree) output */
                        ASToutput jjtn000 = new ASToutput(JJTOUTPUT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.data.put("outputVar", t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void block() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(25);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case IF:
      case SWITCH:
      case VAR:{
        statements();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(26);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void statements() throws ParseException {
    command();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 27:{
      jj_consume_token(27);
      statements();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      if (jj_2_1(2147483647)) {
ASTAssign jjtn002 = new ASTAssign(JJTASSIGN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          variable();
          jj_consume_token(ASSIGN);
ASTMacro jjtn001 = new ASTMacro(JJTMACRO);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(28);
            variable();
            jj_consume_token(29);
            expr();
          } catch (Throwable jjte001) {
if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
          }
        } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
ASTAssign jjtn003 = new ASTAssign(JJTASSIGN);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
          try {
            variable();
            jj_consume_token(ASSIGN);
            expr();
          } catch (Throwable jjte003) {
if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
          }
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case WHILE:{
ASTWhile jjtn004 = new ASTWhile(JJTWHILE);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(WHILE);
        expr();
        block();
      } catch (Throwable jjte004) {
if (jjtc004) {
       jjtree.clearNodeScope(jjtn004);
       jjtc004 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte004 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte004;}
     }
     if (jjte004 instanceof ParseException) {
       {if (true) throw (ParseException)jjte004;}
     }
     {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
      }
      break;
      }
    case IF:{
ASTIf jjtn005 = new ASTIf(JJTIF);
     boolean jjtc005 = true;
     jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(IF);
        expr();
        block();
        if (jj_2_2(2147483647)) {
          jj_consume_token(ELSE);
          block();
        } else {
          ;
        }
      } catch (Throwable jjte005) {
if (jjtc005) {
       jjtree.clearNodeScope(jjtn005);
       jjtc005 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte005 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte005;}
     }
     if (jjte005 instanceof ParseException) {
       {if (true) throw (ParseException)jjte005;}
     }
     {if (true) throw (Error)jjte005;}
      } finally {
if (jjtc005) {
       jjtree.closeNodeScope(jjtn005, true);
     }
      }
      break;
      }
    case SWITCH:{
ASTSwitch jjtn006 = new ASTSwitch(JJTSWITCH);
     boolean jjtc006 = true;
     jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(SWITCH);
        expr();
        jj_consume_token(25);
        label_1:
        while (true) {
          rule();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_1;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEFAULTCASE:{
          defaultCase();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(26);
      } catch (Throwable jjte006) {
if (jjtc006) {
       jjtree.clearNodeScope(jjtn006);
       jjtc006 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte006 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte006;}
     }
     if (jjte006 instanceof ParseException) {
       {if (true) throw (ParseException)jjte006;}
     }
     {if (true) throw (Error)jjte006;}
      } finally {
if (jjtc006) {
       jjtree.closeNodeScope(jjtn006, true);
     }
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void rule() throws ParseException {/*@bgen(jjtree) Case */
  ASTCase jjtn000 = new ASTCase(JJTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CASE);
ASTExprList jjtn001 = new ASTExprList(JJTEXPRLIST);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        exprList();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
      }
      jj_consume_token(30);
ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
      try {
        statements();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte002;}
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte002;}
                                   }
                                   {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                   }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void defaultCase() throws ParseException {/*@bgen(jjtree) DefaultCase */
  ASTDefaultCase jjtn000 = new ASTDefaultCase(JJTDEFAULTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEFAULTCASE);
      jj_consume_token(30);
ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
        statements();
      } catch (Throwable jjte001) {
if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void expr() throws ParseException {Token t;
    if (jj_2_3(2147483647)) {
ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        expr2();
        jj_consume_token(31);
        expr();
      } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case WHILE:
      case IF:
      case CONS:
      case NIL:
      case HD:
      case TL:
      case ATOM:
      case BOOLEAN:
      case VAR:
      case NUM:
      case 32:
      case 34:{
        expr2();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void expr2() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NIL:{
ASTnil jjtn001 = new ASTnil(JJTNIL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(NIL);
      } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_4(2147483647)) {
ASTCons jjtn002 = new ASTCons(JJTCONS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(CONS);
          expr();
          expr();
        } catch (Throwable jjte002) {
if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONS:{
          t = jj_consume_token(CONS);
ASTatom jjtn003 = new ASTatom(JJTATOM);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
          try {
jjtree.closeNodeScope(jjtn003, true);
               jjtc003 = false;
jjtn003.data.put("atom", t.image);
          } finally {
if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
               }
          }
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          if (jj_2_5(2147483647)) {
ASTHd jjtn004 = new ASTHd(JJTHD);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
            try {
              jj_consume_token(HD);
              expr();
            } catch (Throwable jjte004) {
if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
            } finally {
if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case HD:{
              t = jj_consume_token(HD);
ASTatom jjtn005 = new ASTatom(JJTATOM);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
              try {
jjtree.closeNodeScope(jjtn005, true);
             jjtc005 = false;
jjtn005.data.put("atom", t.image);
              } finally {
if (jjtc005) {
               jjtree.closeNodeScope(jjtn005, true);
             }
              }
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              if (jj_2_6(2147483647)) {
ASTTl jjtn006 = new ASTTl(JJTTL);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
                try {
                  jj_consume_token(TL);
                  expr();
                } catch (Throwable jjte006) {
if (jjtc006) {
        jjtree.clearNodeScope(jjtn006);
        jjtc006 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte006 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte006;}
      }
      if (jjte006 instanceof ParseException) {
        {if (true) throw (ParseException)jjte006;}
      }
      {if (true) throw (Error)jjte006;}
                } finally {
if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case TL:{
                  t = jj_consume_token(TL);
ASTatom jjtn007 = new ASTatom(JJTATOM);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
                  try {
jjtree.closeNodeScope(jjtn007, true);
             jjtc007 = false;
jjtn007.data.put("atom", t.image);
                  } finally {
if (jjtc007) {
               jjtree.closeNodeScope(jjtn007, true);
             }
                  }
                  break;
                  }
                case VAR:{
                  variable();
                  break;
                  }
                case NUM:{
                  t = jj_consume_token(NUM);
ASTnum jjtn008 = new ASTnum(JJTNUM);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
                  try {
jjtree.closeNodeScope(jjtn008, true);
              jjtc008 = false;
jjtn008.data.put("num", t.image);
                  } finally {
if (jjtc008) {
                jjtree.closeNodeScope(jjtn008, true);
              }
                  }
                  break;
                  }
                case BOOLEAN:{
                  t = jj_consume_token(BOOLEAN);
ASTbool jjtn009 = new ASTbool(JJTBOOL);
                  boolean jjtc009 = true;
                  jjtree.openNodeScope(jjtn009);
                  try {
jjtree.closeNodeScope(jjtn009, true);
                  jjtc009 = false;
jjtn009.data.put("boolean", t.image);
                  } finally {
if (jjtc009) {
                    jjtree.closeNodeScope(jjtn009, true);
                  }
                  }
                  break;
                  }
                case 32:{
ASTExprList jjtn010 = new ASTExprList(JJTEXPRLIST);
     boolean jjtc010 = true;
     jjtree.openNodeScope(jjtn010);
                  try {
                    jj_consume_token(32);
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case ASSIGN:
                    case WHILE:
                    case IF:
                    case CONS:
                    case NIL:
                    case HD:
                    case TL:
                    case ATOM:
                    case BOOLEAN:
                    case VAR:
                    case NUM:
                    case 32:
                    case 34:{
                      exprList();
                      break;
                      }
                    default:
                      jj_la1[7] = jj_gen;
                      ;
                    }
                    jj_consume_token(33);
                  } catch (Throwable jjte010) {
if (jjtc010) {
       jjtree.clearNodeScope(jjtn010);
       jjtc010 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte010 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte010;}
     }
     if (jjte010 instanceof ParseException) {
       {if (true) throw (ParseException)jjte010;}
     }
     {if (true) throw (Error)jjte010;}
                  } finally {
if (jjtc010) {
       jjtree.closeNodeScope(jjtn010, true);
     }
                  }
                  break;
                  }
                case ASSIGN:
                case WHILE:
                case IF:
                case ATOM:{
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case ATOM:{
                    t = jj_consume_token(ATOM);
                    break;
                    }
                  case ASSIGN:{
                    t = jj_consume_token(ASSIGN);
                    break;
                    }
                  case WHILE:{
                    t = jj_consume_token(WHILE);
                    break;
                    }
                  case IF:{
                    t = jj_consume_token(IF);
                    break;
                    }
                  default:
                    jj_la1[8] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
ASTatom jjtn011 = new ASTatom(JJTATOM);
                                             boolean jjtc011 = true;
                                             jjtree.openNodeScope(jjtn011);
                  try {
jjtree.closeNodeScope(jjtn011, true);
                                             jjtc011 = false;
jjtn011.data.put("atom", t.image);
                  } finally {
if (jjtc011) {
                                               jjtree.closeNodeScope(jjtn011, true);
                                             }
                  }
                  break;
                  }
                case 34:{
                  jj_consume_token(34);
                  expr();
                  jj_consume_token(35);
                  break;
                  }
                default:
                  jj_la1[12] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
  }

  final public void variable() throws ParseException {/*@bgen(jjtree) var */
                       ASTvar jjtn000 = new ASTvar(JJTVAR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VAR);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
jjtn000.data.put("varname", t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void exprList() throws ParseException {
    if (jj_2_7(2147483647)) {
      expr();
      jj_consume_token(36);
      exprList();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case WHILE:
      case IF:
      case CONS:
      case NIL:
      case HD:
      case TL:
      case ATOM:
      case BOOLEAN:
      case VAR:
      case NUM:
      case 32:
      case 34:{
        expr();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3_7()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(36)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_3()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_4()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3R_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_3()) return true;
    if (jj_scan_token(36)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  private boolean jj_3R_6()
 {
    if (jj_3R_4()) return true;
    if (jj_scan_token(31)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_2()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(34)) return true;
    if (jj_3R_3()) return true;
    if (jj_scan_token(35)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(32)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_2()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(28)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(29)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(TL)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_2()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(HD)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(TL)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_scan_token(TL)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(CONS)) return true;
    if (jj_3R_3()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(HD)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    if (jj_scan_token(HD)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    if (jj_scan_token(CONS)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ProgramParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x820c00,0x8000000,0x800000,0x40000,0x80000,0x820c00,0x1e1ee00,0x1e1ee00,0x200e00,0x4000,0x2000,0x8000,0x1e10e00,0x1e1ee00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x5,0x0,0x0,0x0,0x0,0x5,0x5,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ProgramParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProgramParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProgramParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ProgramParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProgramParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ProgramParser(ProgramParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ProgramParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
